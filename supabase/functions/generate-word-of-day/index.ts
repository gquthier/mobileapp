// Edge Function pour g√©n√©ration du mot du jour personnalis√©
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface WordOfDayRequest {
  forceGenerate?: boolean; // Pour forcer une nouvelle g√©n√©ration
  language?: string; // 'fr' | 'en'
}

interface WordOfDayResponse {
  success: boolean;
  wordOfDay: {
    id: string;
    word: string;
    definition: string;
    rationale: string;
    personalConnection: string;
    examples: string[];
    videoSources?: Array<{
      videoId: string;
      videoTitle: string;
      relevantQuote: string;
    }>;
    language: string;
    createdAt: string;
    validUntil: string;
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log('üìö Generate Word of Day function called');

    // Authentification
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Missing authorization header');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
      }
    );

    const {
      data: { user },
      error: userError,
    } = await supabaseClient.auth.getUser();

    if (userError || !user) {
      throw new Error('Unauthorized');
    }

    const { forceGenerate = false, language = 'fr' }: WordOfDayRequest = await req.json();

    console.log(`üåÖ Generating word of day for user ${user.id} in ${language}`);

    // R√©cup√©rer les transcriptions r√©centes (derni√®re semaine)
    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();

    const { data: recentTranscriptions, error: transcError } = await supabaseClient
      .from('transcriptions')
      .select(`
        *,
        videos (
          id,
          title,
          created_at
        )
      `)
      .eq('videos.user_id', user.id)
      .eq('processing_status', 'completed')
      .gte('videos.created_at', oneWeekAgo)
      .order('videos.created_at', { ascending: false })
      .limit(10);

    if (transcError) {
      throw new Error('Failed to fetch recent transcriptions');
    }

    // Si pas de contenu r√©cent, utiliser un mot g√©n√©rique inspirant
    if (!recentTranscriptions || recentTranscriptions.length === 0) {
      const genericWords = language === 'fr' ? [
        {
          word: 'INSPIRATION',
          definition: 'Action d\'inspirer, de stimuler l\'activit√© cr√©atrice.',
          rationale: 'Commencez votre voyage de r√©flexion personnelle en vous inspirant du monde qui vous entoure.',
          personalConnection: 'Chaque moment peut √™tre une source d\'inspiration pour vos futurs enregistrements.',
          examples: ['Trouvez l\'inspiration dans les petits moments du quotidien', 'Laissez-vous inspirer par vos exp√©riences']
        },
        {
          word: 'R√âFLEXION',
          definition: 'Action de r√©fl√©chir, de penser attentivement √† quelque chose.',
          rationale: 'La r√©flexion est la cl√© pour comprendre vos pens√©es et √©motions.',
          personalConnection: 'Prenez un moment aujourd\'hui pour r√©fl√©chir √† votre journ√©e.',
          examples: ['La r√©flexion enrichit la compr√©hension de soi', 'Chaque r√©flexion est un pas vers la croissance']
        }
      ] : [
        {
          word: 'MINDFULNESS',
          definition: 'The practice of purposeful, non-judgmental awareness of the present moment.',
          rationale: 'Start your personal reflection journey by being present and aware.',
          personalConnection: 'Every moment of mindfulness can inspire your future recordings.',
          examples: ['Practice mindfulness in your daily activities', 'Be mindful of your thoughts and feelings']
        }
      ];

      const randomWord = genericWords[Math.floor(Math.random() * genericWords.length)];

      return new Response(
        JSON.stringify({
          success: true,
          wordOfDay: {
            id: `generic_${Date.now()}`,
            ...randomWord,
            videoSources: [],
            language,
            createdAt: new Date().toISOString(),
            validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
          }
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200,
        }
      );
    }

    // Pr√©parer le contenu pour l'analyse
    const contentForAnalysis = recentTranscriptions.map(t => ({
      title: t.videos?.title || 'Sans titre',
      date: t.videos?.created_at,
      text: t.text.substring(0, 500), // Limiter pour √©viter les tokens excessifs
      segments: (t.segments || []).slice(0, 3) // Premiers segments seulement
    }));

    const recentContent = contentForAnalysis.map(c =>
      `${c.title} (${c.date}): ${c.text}`
    ).join('\n\n---\n\n');

    // R√©cup√©rer la cl√© API OpenAI
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prompt syst√®me pour la g√©n√©ration du mot
    const systemPrompt = language === 'fr' ? `Tu es un expert en d√©veloppement personnel qui g√©n√®re un "mot du jour" personnalis√© bas√© sur les r√©flexions r√©centes de l'utilisateur.

CONTENU R√âCENT DE L'UTILISATEUR:
${recentContent}

INSTRUCTIONS:
1. Analyse le contenu pour identifier les th√®mes, √©motions et pr√©occupations principales
2. Choisis UN MOT significatif qui r√©sonne avec le contenu r√©cent
3. Le mot doit √™tre inspirant, utile et personnellement pertinent
4. R√©ponds UNIQUEMENT au format JSON suivant:

{
  "word": "MOT_CHOISI",
  "definition": "D√©finition claire et pr√©cise du mot",
  "rationale": "Pourquoi ce mot est pertinent bas√© sur le contenu r√©cent (100 mots max)",
  "personalConnection": "Comment ce mot se connecte sp√©cifiquement aux r√©flexions r√©centes (80 mots max)",
  "examples": ["Exemple d'usage 1", "Exemple d'usage 2"],
  "relevantQuotes": ["Citation pertinente du contenu", "Autre citation si applicable"]
}

Le mot doit √™tre en fran√ßais, inspirant et actionnable.` : `You are a personal development expert who generates a personalized "word of the day" based on the user's recent reflections.

USER'S RECENT CONTENT:
${recentContent}

INSTRUCTIONS:
1. Analyze the content to identify main themes, emotions, and concerns
2. Choose ONE meaningful word that resonates with the recent content
3. The word should be inspiring, useful, and personally relevant
4. Respond ONLY in the following JSON format:

{
  "word": "CHOSEN_WORD",
  "definition": "Clear and precise definition of the word",
  "rationale": "Why this word is relevant based on recent content (100 words max)",
  "personalConnection": "How this word specifically connects to recent reflections (80 words max)",
  "examples": ["Usage example 1", "Usage example 2"],
  "relevantQuotes": ["Relevant quote from content", "Another quote if applicable"]
}

The word should be in English, inspiring and actionable.`;

    console.log('ü§ñ Calling OpenAI for word generation...');

    // Appel √† OpenAI
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt }
        ],
        max_tokens: 800,
        temperature: 0.7,
        response_format: { type: "json_object" }
      }),
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      throw new Error(`OpenAI API error: ${openaiResponse.status} - ${errorText}`);
    }

    const openaiResult = await openaiResponse.json();
    const wordContent = openaiResult.choices[0]?.message?.content;

    if (!wordContent) {
      throw new Error('No word content generated');
    }

    // Parser le JSON de r√©ponse
    let parsedWord;
    try {
      parsedWord = JSON.parse(wordContent);
    } catch (parseError) {
      console.error('Failed to parse OpenAI response:', wordContent);
      throw new Error('Invalid word format generated');
    }

    // Identifier les sources vid√©o pertinentes
    const videoSources = recentTranscriptions
      .filter(t => parsedWord.relevantQuotes?.some((quote: string) =>
        t.text.toLowerCase().includes(quote.toLowerCase().substring(0, 20))
      ))
      .slice(0, 2)
      .map(t => ({
        videoId: t.video_id,
        videoTitle: t.videos?.title || 'Sans titre',
        relevantQuote: parsedWord.relevantQuotes?.[0] || t.text.substring(0, 100) + '...'
      }));

    const wordOfDay = {
      id: `word_${Date.now()}`,
      word: parsedWord.word || 'INSPIRATION',
      definition: parsedWord.definition || 'Un mot choisi pour vous inspirer.',
      rationale: parsedWord.rationale || 'Bas√© sur vos r√©flexions r√©centes.',
      personalConnection: parsedWord.personalConnection || 'Connect√© √† votre parcours personnel.',
      examples: parsedWord.examples || ['Utilisez ce mot dans votre r√©flexion du jour'],
      videoSources,
      language,
      createdAt: new Date().toISOString(),
      validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    };

    console.log(`‚úÖ Word of day generated: ${wordOfDay.word}`);

    return new Response(
      JSON.stringify({
        success: true,
        wordOfDay,
        usage: {
          videosAnalyzed: recentTranscriptions.length,
          totalTokens: openaiResult.usage?.total_tokens || 0,
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('üí• Generate word of day failed:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
        wordOfDay: {
          id: `error_${Date.now()}`,
          word: 'PERS√âV√âRANCE',
          definition: 'Qualit√© de celui qui pers√©v√®re, qui persiste dans ses r√©solutions.',
          rationale: 'M√™me face aux difficult√©s techniques, la pers√©v√©rance nous aide √† avancer.',
          personalConnection: 'Continuez votre parcours de r√©flexion personnelle.',
          examples: ['Pers√©v√©rez dans vos objectifs', 'La pers√©v√©rance m√®ne au succ√®s'],
          videoSources: [],
          language: 'fr',
          createdAt: new Date().toISOString(),
          validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});