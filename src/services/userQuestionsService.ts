import { supabase } from '../lib/supabase';

export interface UserQuestion {
  id: string;
  user_id: string;
  question_text: string;
  batch_number: number;
  order_index: number;
  is_used: boolean;
  created_at: string;
}

export class UserQuestionsService {
  /**
   * R√©cup√®re toutes les questions non √©puis√©es pour l'utilisateur courant
   * Tri√©es par batch et order_index
   */
  static async getUnusedQuestions(): Promise<UserQuestion[]> {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('‚ùå No authenticated user for questions:', authError);
        return [];
      }

      const { data, error } = await supabase
        .from('user_questions')
        .select('*')
        .eq('user_id', user.id)
        .eq('is_used', false)
        .order('batch_number', { ascending: true })
        .order('order_index', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching unused questions:', error);
        return [];
      }

      console.log(`‚úÖ Found ${data?.length || 0} unused questions`);
      return data || [];
    } catch (error) {
      console.error('‚ùå Error in getUnusedQuestions:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re la prochaine question disponible (la premi√®re non √©puis√©e)
   */
  static async getNextQuestion(): Promise<UserQuestion | null> {
    try {
      const questions = await this.getUnusedQuestions();

      if (questions.length === 0) {
        console.log('‚ö†Ô∏è No unused questions available');
        return null;
      }

      return questions[0];
    } catch (error) {
      console.error('‚ùå Error in getNextQuestion:', error);
      return null;
    }
  }

  /**
   * Marque une question comme √©puis√©e (utilis√©e)
   */
  static async markQuestionAsUsed(questionId: string): Promise<boolean> {
    try {
      console.log('üîÑ Marking question as used:', questionId);

      const { error } = await supabase
        .from('user_questions')
        .update({ is_used: true })
        .eq('id', questionId);

      if (error) {
        console.error('‚ùå Error marking question as used:', error);
        return false;
      }

      console.log('‚úÖ Question marked as used');
      return true;
    } catch (error) {
      console.error('‚ùå Error in markQuestionAsUsed:', error);
      return false;
    }
  }

  /**
   * Compte le nombre de questions non √©puis√©es
   */
  static async countUnusedQuestions(): Promise<number> {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('‚ùå No authenticated user for counting:', authError);
        return 0;
      }

      // Utiliser la fonction SQL pour compter
      const { data, error } = await supabase
        .rpc('count_unused_questions', { p_user_id: user.id });

      if (error) {
        console.error('‚ùå Error counting unused questions:', error);
        return 0;
      }

      console.log(`üìä Unused questions count: ${data || 0}`);
      return data || 0;
    } catch (error) {
      console.error('‚ùå Error in countUnusedQuestions:', error);
      return 0;
    }
  }

  /**
   * V√©rifie si on a besoin de g√©n√©rer de nouvelles questions
   * Retourne true si ‚â§ 5 questions restantes
   */
  static async needsNewQuestions(): Promise<boolean> {
    try {
      const count = await this.countUnusedQuestions();
      const needsNew = count <= 5;

      if (needsNew) {
        console.log(`‚ö†Ô∏è Only ${count} questions left - need to generate more`);
      }

      return needsNew;
    } catch (error) {
      console.error('‚ùå Error in needsNewQuestions:', error);
      return false;
    }
  }

  /**
   * D√©clenche la g√©n√©ration de nouvelles questions via l'Edge Function
   * Cette fonction est asynchrone et ne bloque pas
   */
  static async generateNewQuestions(): Promise<boolean> {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('‚ùå No authenticated user for generation:', authError);
        return false;
      }

      console.log('üöÄ Triggering question generation for user:', user.id);

      const { data, error } = await supabase.functions.invoke('generate-user-questions', {
        body: { userId: user.id }
      });

      if (error) {
        console.error('‚ùå Error invoking generate-user-questions:', error);
        return false;
      }

      if (!data.success) {
        console.error('‚ùå Question generation failed:', data.error);
        return false;
      }

      console.log(`‚úÖ Generated batch #${data.batchNumber} with ${data.questionCount} questions`);
      return true;
    } catch (error) {
      console.error('‚ùå Error in generateNewQuestions:', error);
      return false;
    }
  }

  /**
   * V√©rifie et g√©n√®re de nouvelles questions si n√©cessaire
   * √Ä appeler apr√®s avoir marqu√© une question comme utilis√©e
   */
  static async checkAndGenerateIfNeeded(): Promise<void> {
    try {
      const needsNew = await this.needsNewQuestions();

      if (needsNew) {
        console.log('üîÑ Triggering automatic question generation...');
        // G√©n√©rer en arri√®re-plan sans attendre
        this.generateNewQuestions().catch(err => {
          console.error('‚ùå Background question generation failed:', err);
        });
      }
    } catch (error) {
      console.error('‚ùå Error in checkAndGenerateIfNeeded:', error);
    }
  }

  /**
   * Compte le nombre de transcriptions compl√©t√©es pour l'utilisateur
   */
  static async countCompletedTranscriptions(): Promise<number> {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('‚ùå No authenticated user for transcription count:', authError);
        return 0;
      }

      // R√©cup√©rer toutes les vid√©os de l'utilisateur
      const { data: videos, error: videosError } = await supabase
        .from('videos')
        .select('id')
        .eq('user_id', user.id);

      if (videosError || !videos || videos.length === 0) {
        return 0;
      }

      const videoIds = videos.map(v => v.id);

      // Compter les transcriptions compl√©t√©es
      const { data, error } = await supabase
        .from('transcription_jobs')
        .select('id', { count: 'exact', head: true })
        .in('video_id', videoIds)
        .eq('status', 'completed');

      if (error) {
        console.error('‚ùå Error counting transcriptions:', error);
        return 0;
      }

      const count = data?.length || 0;
      console.log(`üìä User has ${count} completed transcriptions`);
      return count;
    } catch (error) {
      console.error('‚ùå Error in countCompletedTranscriptions:', error);
      return 0;
    }
  }

  /**
   * Initialise le syst√®me de questions pour un nouvel utilisateur
   * ou pour un utilisateur qui n'a pas encore de questions
   *
   * Ne g√©n√®re que si l'utilisateur a au moins 3 transcriptions
   * Sinon, utilise les questions statiques
   */
  static async initializeQuestionsIfNeeded(): Promise<void> {
    try {
      const questionCount = await this.countUnusedQuestions();

      if (questionCount === 0) {
        console.log('üÜï No questions found - checking if we can initialize');

        const transcriptionCount = await this.countCompletedTranscriptions();

        if (transcriptionCount >= 3) {
          console.log(`‚úÖ User has ${transcriptionCount} transcriptions - generating AI questions`);
          await this.generateNewQuestions();
        } else {
          console.log(`‚ö†Ô∏è User only has ${transcriptionCount} transcriptions (need 3+) - will use static questions`);
        }
      }
    } catch (error) {
      console.error('‚ùå Error in initializeQuestionsIfNeeded:', error);
    }
  }

  /**
   * V√©rifie et g√©n√®re automatiquement des questions apr√®s chaque transcription
   *
   * √Ä appeler apr√®s chaque transcription termin√©e pour:
   * - G√©n√©rer le premier batch d√®s 3 transcriptions
   * - R√©g√©n√©rer automatiquement si ‚â§5 questions restent
   */
  static async autoGenerateAfterTranscription(): Promise<void> {
    try {
      console.log('üîç Checking if question generation needed after transcription...');

      const questionCount = await this.countUnusedQuestions();
      const transcriptionCount = await this.countCompletedTranscriptions();

      console.log(`üìä Current state: ${questionCount} questions, ${transcriptionCount} transcriptions`);

      // Cas 1: Aucune question ET au moins 3 transcriptions ‚Üí g√©n√©rer premier batch
      if (questionCount === 0 && transcriptionCount >= 3) {
        console.log('üöÄ First batch: generating questions with 3+ transcriptions');
        this.generateNewQuestions().catch(err => {
          console.error('‚ùå Auto-generation failed:', err);
        });
        return;
      }

      // Cas 2: ‚â§5 questions restantes ‚Üí g√©n√©rer nouveau batch
      if (questionCount > 0 && questionCount <= 5) {
        console.log(`‚ö†Ô∏è Only ${questionCount} questions left - triggering regeneration`);
        this.generateNewQuestions().catch(err => {
          console.error('‚ùå Auto-regeneration failed:', err);
        });
        return;
      }

      console.log('‚úÖ No generation needed - sufficient questions available');
    } catch (error) {
      console.error('‚ùå Error in autoGenerateAfterTranscription:', error);
    }
  }

  /**
   * R√©cup√®re toutes les questions (utilis√©es et non utilis√©es) pour debug
   */
  static async getAllQuestions(): Promise<UserQuestion[]> {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('‚ùå No authenticated user:', authError);
        return [];
      }

      const { data, error } = await supabase
        .from('user_questions')
        .select('*')
        .eq('user_id', user.id)
        .order('batch_number', { ascending: true })
        .order('order_index', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching all questions:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå Error in getAllQuestions:', error);
      return [];
    }
  }
}
