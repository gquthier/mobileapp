import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

/**
 * üîî NOTIFICATION SERVICE
 *
 * Service centralis√© pour g√©rer toutes les notifications locales de l'app.
 * Architecture modulaire pour faciliter les modifications futures.
 */

// ========================================
// üìã CONFIGURATION CENTRALIS√âE
// ========================================

/**
 * Configuration de toutes les notifications de l'app.
 *
 * ‚úèÔ∏è MODIFIER ICI pour changer les messages, horaires, etc.
 */
export const NOTIFICATION_CONFIG = {
  // Notification quotidienne pour enregistrer une vid√©o
  dailyReminder: {
    title: 'üé¨ Daily Reflection',
    body: "It's time to capture your moment of the day",
    data: {
      type: 'daily_reminder',
      screen: 'RecordScreen'
    },
    // Horaire par d√©faut (modifiable par l'utilisateur plus tard)
    defaultHour: 19,    // 19h (7 PM)
    defaultMinute: 0,
    sound: 'default',
    priority: Notifications.AndroidNotificationPriority.HIGH,
  },

  // üîÆ FUTURS TYPES DE NOTIFICATIONS (√† d√©commenter quand n√©cessaire)
  /*
  weeklyReview: {
    title: 'üìä Weekly Review',
    body: 'Take a moment to reflect on your week',
    data: { type: 'weekly_review', screen: 'ChapterDetailScreen' },
    defaultDay: 0, // Sunday
    defaultHour: 10,
    defaultMinute: 0,
  },

  chapterMilestone: {
    title: 'üéâ Chapter Milestone',
    body: "You've recorded 10 videos in this chapter!",
    data: { type: 'milestone' },
  },
  */
} as const;

// ========================================
// üîë STORAGE KEYS
// ========================================

const STORAGE_KEYS = {
  PERMISSION_STATUS: '@notification_permission_status',
  DAILY_REMINDER_ID: '@daily_reminder_notification_id',
  USER_PREFERENCES: '@notification_preferences',
} as const;

// ========================================
// üì± TYPES
// ========================================

export type ReminderFrequency = '24h' | '3d' | '7d' | '14d' | '1m' | '2m';

export interface NotificationPreferences {
  dailyReminderEnabled: boolean;
  dailyReminderHour: number;
  dailyReminderMinute: number;
  reminderFrequency: ReminderFrequency;
  // üîÆ Futures pr√©f√©rences
  // weeklyReviewEnabled?: boolean;
  // weeklyReviewDay?: number;
}

export type NotificationPermissionStatus = 'granted' | 'denied' | 'undetermined';

// ========================================
// ‚öôÔ∏è CONFIGURATION DU HANDLER
// ========================================

/**
 * Configure comment les notifications sont affich√©es quand l'app est au premier plan.
 *
 * ‚ö†Ô∏è Cette fonction DOIT √™tre appel√©e au d√©marrage de l'app (dans App.tsx)
 */
export function configureNotificationHandler() {
  Notifications.setNotificationHandler({
    handleNotification: async () => ({
      shouldShowAlert: true,      // Afficher la notif m√™me si app ouverte
      shouldPlaySound: true,       // Jouer le son
      shouldSetBadge: false,       // Ne pas mettre de badge sur l'ic√¥ne
    }),
  });
}

// ========================================
// üîê GESTION DES PERMISSIONS
// ========================================

/**
 * Demande la permission d'envoyer des notifications √† l'utilisateur.
 *
 * ‚ö†Ô∏è Sur iOS, cette popup ne peut √™tre affich√©e qu'UNE SEULE FOIS.
 * Apr√®s refus, l'utilisateur doit aller manuellement dans Settings > Notifications.
 *
 * @returns Le statut de la permission
 */
export async function requestNotificationPermissions(): Promise<NotificationPermissionStatus> {
  // V√©rifier qu'on est sur un vrai appareil (pas simulateur)
  if (!Device.isDevice) {
    console.log('‚ö†Ô∏è Notifications ne fonctionnent pas sur simulateur');
    return 'denied';
  }

  try {
    // V√©rifier le statut actuel
    const { status: existingStatus } = await Notifications.getPermissionsAsync();

    let finalStatus = existingStatus;

    // Si pas encore demand√©, demander la permission
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    // Sauvegarder le statut
    await AsyncStorage.setItem(STORAGE_KEYS.PERMISSION_STATUS, finalStatus);

    if (finalStatus !== 'granted') {
      console.log('‚ùå Permission refus√©e');
      return 'denied';
    }

    console.log('‚úÖ Permission accord√©e');

    // Sur Android, cr√©er le channel de notification
    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'Default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });
    }

    return 'granted';
  } catch (error) {
    console.error('‚ùå Erreur lors de la demande de permission:', error);
    return 'denied';
  }
}

/**
 * V√©rifie le statut actuel des permissions sans demander.
 */
export async function checkNotificationPermissions(): Promise<NotificationPermissionStatus> {
  try {
    const { status } = await Notifications.getPermissionsAsync();
    return status as NotificationPermissionStatus;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification permissions:', error);
    return 'denied';
  }
}

// ========================================
// üìÖ NOTIFICATIONS QUOTIDIENNES
// ========================================

/**
 * Convertit une fr√©quence de reminder en secondes.
 */
function getFrequencyInSeconds(frequency: ReminderFrequency): number {
  const HOUR = 3600;
  const DAY = 86400; // 24 * 3600
  const MONTH = 2592000; // 30 * 24 * 3600

  switch (frequency) {
    case '24h':
      return DAY;
    case '3d':
      return 3 * DAY;
    case '7d':
      return 7 * DAY;
    case '14d':
      return 14 * DAY;
    case '1m':
      return MONTH;
    case '2m':
      return 2 * MONTH;
    default:
      return DAY;
  }
}

/**
 * Calcule le prochain d√©clenchement bas√© sur l'heure et la fr√©quence.
 */
function getNextTriggerDate(hour: number, minute: number, frequency: ReminderFrequency): Date {
  const now = new Date();
  const trigger = new Date();

  // Set to today at the specified time
  trigger.setHours(hour, minute, 0, 0);

  // If the time has already passed today, schedule for next occurrence based on frequency
  if (trigger <= now) {
    const frequencyInMs = getFrequencyInSeconds(frequency) * 1000;
    trigger.setTime(trigger.getTime() + frequencyInMs);
  }

  return trigger;
}

/**
 * Programme la notification quotidienne pour enregistrer une vid√©o.
 *
 * @param hour Heure (0-23, d√©faut: 19h)
 * @param minute Minute (0-59, d√©faut: 0)
 * @param frequency Fr√©quence du reminder (d√©faut: '24h')
 * @returns L'ID de la notification programm√©e
 */
export async function scheduleDailyReminder(
  hour: number = NOTIFICATION_CONFIG.dailyReminder.defaultHour,
  minute: number = NOTIFICATION_CONFIG.dailyReminder.defaultMinute,
  frequency: ReminderFrequency = '24h'
): Promise<string | null> {
  try {
    // V√©rifier les permissions d'abord
    const permission = await checkNotificationPermissions();
    if (permission !== 'granted') {
      console.log('‚ö†Ô∏è Pas de permission pour programmer des notifications');
      return null;
    }

    // Annuler l'ancienne notification quotidienne si elle existe
    const oldId = await AsyncStorage.getItem(STORAGE_KEYS.DAILY_REMINDER_ID);
    if (oldId) {
      await Notifications.cancelScheduledNotificationAsync(oldId);
      console.log('üóëÔ∏è Ancienne notification quotidienne annul√©e');
    }

    // Programmer la nouvelle notification avec la fr√©quence
    let trigger: any;

    if (frequency === '24h') {
      // Pour 24h, utiliser le syst√®me de r√©p√©tition quotidienne
      trigger = {
        hour,
        minute,
        repeats: true,
      };
    } else {
      // Pour les autres fr√©quences, utiliser un intervalle en secondes
      const intervalInSeconds = getFrequencyInSeconds(frequency);
      trigger = {
        seconds: intervalInSeconds,
        repeats: true,
      };
    }

    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: NOTIFICATION_CONFIG.dailyReminder.title,
        body: NOTIFICATION_CONFIG.dailyReminder.body,
        data: NOTIFICATION_CONFIG.dailyReminder.data,
        sound: NOTIFICATION_CONFIG.dailyReminder.sound,
        priority: NOTIFICATION_CONFIG.dailyReminder.priority,
      },
      trigger,
    });

    // Sauvegarder l'ID et les pr√©f√©rences
    await AsyncStorage.setItem(STORAGE_KEYS.DAILY_REMINDER_ID, notificationId);
    await saveNotificationPreferences({
      dailyReminderEnabled: true,
      dailyReminderHour: hour,
      dailyReminderMinute: minute,
      reminderFrequency: frequency,
    });

    const frequencyLabel = frequency === '24h' ? 'daily' : `every ${frequency}`;
    console.log(`‚úÖ Notification programm√©e pour ${hour}:${minute.toString().padStart(2, '0')} (${frequencyLabel})`);
    console.log(`üìù ID: ${notificationId}`);

    return notificationId;
  } catch (error) {
    console.error('‚ùå Erreur programmation notification:', error);
    return null;
  }
}

/**
 * Met √† jour l'horaire de la notification quotidienne.
 *
 * Utile quand l'utilisateur change ses pr√©f√©rences dans Settings.
 */
export async function updateDailyReminder(
  hour: number,
  minute: number,
  frequency?: ReminderFrequency
): Promise<void> {
  console.log(`üîÑ Mise √† jour notification quotidienne: ${hour}:${minute.toString().padStart(2, '0')}`);

  // Si pas de frequency fournie, r√©cup√©rer depuis les pr√©f√©rences
  if (!frequency) {
    const prefs = await getNotificationPreferences();
    frequency = prefs.reminderFrequency;
  }

  await scheduleDailyReminder(hour, minute, frequency);
}

/**
 * D√©sactive la notification quotidienne.
 */
export async function cancelDailyReminder(): Promise<void> {
  try {
    const notificationId = await AsyncStorage.getItem(STORAGE_KEYS.DAILY_REMINDER_ID);

    if (notificationId) {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
      await AsyncStorage.removeItem(STORAGE_KEYS.DAILY_REMINDER_ID);

      // Mettre √† jour les pr√©f√©rences
      const prefs = await getNotificationPreferences();
      await saveNotificationPreferences({
        ...prefs,
        dailyReminderEnabled: false,
      });

      console.log('‚úÖ Notification quotidienne annul√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur annulation notification:', error);
  }
}

// ========================================
// üíæ PR√âF√âRENCES UTILISATEUR
// ========================================

/**
 * Sauvegarde les pr√©f√©rences de notification de l'utilisateur.
 */
async function saveNotificationPreferences(prefs: NotificationPreferences): Promise<void> {
  try {
    await AsyncStorage.setItem(STORAGE_KEYS.USER_PREFERENCES, JSON.stringify(prefs));
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde pr√©f√©rences:', error);
  }
}

/**
 * R√©cup√®re les pr√©f√©rences de notification de l'utilisateur.
 */
export async function getNotificationPreferences(): Promise<NotificationPreferences> {
  try {
    const data = await AsyncStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);

    if (data) {
      return JSON.parse(data);
    }

    // Pr√©f√©rences par d√©faut
    return {
      dailyReminderEnabled: true,
      dailyReminderHour: NOTIFICATION_CONFIG.dailyReminder.defaultHour,
      dailyReminderMinute: NOTIFICATION_CONFIG.dailyReminder.defaultMinute,
      reminderFrequency: '24h',
    };
  } catch (error) {
    console.error('‚ùå Erreur lecture pr√©f√©rences:', error);
    return {
      dailyReminderEnabled: true,
      dailyReminderHour: NOTIFICATION_CONFIG.dailyReminder.defaultHour,
      dailyReminderMinute: NOTIFICATION_CONFIG.dailyReminder.defaultMinute,
      reminderFrequency: '24h',
    };
  }
}

// ========================================
// üóëÔ∏è GESTION GLOBALE
// ========================================

/**
 * Annule TOUTES les notifications programm√©es.
 *
 * ‚ö†Ô∏è Utiliser avec pr√©caution !
 */
export async function cancelAllNotifications(): Promise<void> {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    await AsyncStorage.removeItem(STORAGE_KEYS.DAILY_REMINDER_ID);
    console.log('üóëÔ∏è Toutes les notifications annul√©es');
  } catch (error) {
    console.error('‚ùå Erreur annulation notifications:', error);
  }
}

/**
 * Liste toutes les notifications programm√©es (pour debug).
 */
export async function getAllScheduledNotifications(): Promise<Notifications.NotificationRequest[]> {
  try {
    const notifications = await Notifications.getAllScheduledNotificationsAsync();
    console.log(`üìã ${notifications.length} notification(s) programm√©e(s)`);
    notifications.forEach((notif, index) => {
      console.log(`  ${index + 1}. ID: ${notif.identifier}`);
      console.log(`     Titre: ${notif.content.title}`);
      console.log(`     Trigger:`, notif.trigger);
    });
    return notifications;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration notifications:', error);
    return [];
  }
}

// ========================================
// üéØ LISTENERS (Gestion des clics)
// ========================================

/**
 * Configure le listener qui s'ex√©cute quand l'utilisateur clique sur une notification.
 *
 * @param callback Fonction appel√©e avec les donn√©es de la notification
 * @returns Fonction de nettoyage (cleanup)
 *
 * @example
 * // Dans App.tsx ou navigation
 * useEffect(() => {
 *   const cleanup = setupNotificationClickListener((data) => {
 *     if (data.screen === 'RecordScreen') {
 *       navigation.navigate('RecordScreen');
 *     }
 *   });
 *   return cleanup;
 * }, []);
 */
export function setupNotificationClickListener(
  callback: (data: any) => void
): () => void {
  const subscription = Notifications.addNotificationResponseReceivedListener(response => {
    const data = response.notification.request.content.data;
    console.log('üîî Notification cliqu√©e:', data);
    callback(data);
  });

  // Retourner la fonction de nettoyage
  return () => subscription.remove();
}

/**
 * Configure le listener qui s'ex√©cute quand une notification est re√ßue (app au premier plan).
 *
 * @param callback Fonction appel√©e avec la notification
 * @returns Fonction de nettoyage (cleanup)
 */
export function setupNotificationReceivedListener(
  callback: (notification: Notifications.Notification) => void
): () => void {
  const subscription = Notifications.addNotificationReceivedListener(notification => {
    console.log('üîî Notification re√ßue:', notification.request.content.title);
    callback(notification);
  });

  return () => subscription.remove();
}

// ========================================
// üöÄ INITIALISATION COMPL√àTE
// ========================================

/**
 * Initialise le syst√®me de notifications au d√©marrage de l'app.
 *
 * Cette fonction:
 * 1. Configure le handler
 * 2. V√©rifie les permissions
 * 3. Programme la notification quotidienne si activ√©e
 *
 * ‚ö†Ô∏è √Ä appeler dans App.tsx au d√©marrage
 */
export async function initializeNotifications(): Promise<void> {
  console.log('üîî Initialisation du syst√®me de notifications...');

  try {
    // 1. Configurer le handler
    configureNotificationHandler();

    // 2. V√©rifier les permissions
    const permission = await checkNotificationPermissions();
    console.log(`üìã Statut permissions: ${permission}`);

    // 3. Si granted, v√©rifier les pr√©f√©rences et programmer
    if (permission === 'granted') {
      const prefs = await getNotificationPreferences();

      if (prefs.dailyReminderEnabled) {
        await scheduleDailyReminder(
          prefs.dailyReminderHour,
          prefs.dailyReminderMinute,
          prefs.reminderFrequency
        );
      }
    }

    console.log('‚úÖ Syst√®me de notifications initialis√©');
  } catch (error) {
    console.error('‚ùå Erreur initialisation notifications:', error);
  }
}
