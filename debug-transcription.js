#!/usr/bin/env node

// Script de diagnostic pour identifier le probl√®me exact de transcription
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;
const openaiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;

async function testTranscription() {
  console.log('üîç DIAGNOSTIC DE TRANSCRIPTION');
  console.log('===============================');

  // 1. V√©rifier les variables d'environnement
  console.log('1Ô∏è‚É£ Variables d\'environnement:');
  console.log('   Supabase URL:', !!supabaseUrl);
  console.log('   Supabase Key:', !!supabaseKey);
  console.log('   OpenAI Key:', !!openaiKey);
  console.log('   OpenAI Key prefix:', openaiKey ? openaiKey.substring(0, 10) + '...' : 'MANQUANT');

  if (!openaiKey) {
    console.error('‚ùå Cl√© OpenAI manquante !');
    return;
  }

  // 2. R√©cup√©rer le dernier fichier vid√©o de Supabase
  console.log('\n2Ô∏è‚É£ R√©cup√©ration du dernier fichier vid√©o...');
  const supabase = createClient(supabaseUrl, supabaseKey);

  const { data: videos, error } = await supabase
    .from('videos')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(1);

  if (error || !videos || videos.length === 0) {
    console.error('‚ùå Impossible de r√©cup√©rer une vid√©o:', error);
    return;
  }

  const video = videos[0];
  console.log('‚úÖ Vid√©o trouv√©e:', {
    id: video.id,
    title: video.title,
    file_path: video.file_path,
    duration: video.duration
  });

  // 3. Tester l'accessibilit√© du fichier
  console.log('\n3Ô∏è‚É£ Test d\'accessibilit√© du fichier...');
  try {
    const response = await fetch(video.file_path, { method: 'HEAD' });
    console.log('   Status:', response.status);
    console.log('   Content-Type:', response.headers.get('content-type'));
    console.log('   Content-Length:', response.headers.get('content-length'));

    if (!response.ok) {
      console.error('‚ùå Fichier non accessible:', response.status);
      return;
    }
  } catch (error) {
    console.error('‚ùå Erreur d\'acc√®s au fichier:', error.message);
    return;
  }

  // 4. T√©l√©charger le fichier localement (simulation)
  console.log('\n4Ô∏è‚É£ Test de t√©l√©chargement...');
  try {
    const response = await fetch(video.file_path);
    const buffer = await response.arrayBuffer();
    const sizeInMB = buffer.byteLength / (1024 * 1024);

    console.log('‚úÖ Fichier t√©l√©charg√© avec succ√®s');
    console.log('   Taille:', sizeInMB.toFixed(2) + 'MB');
    console.log('   Limite OpenAI: 25MB');
    console.log('   Dans la limite:', sizeInMB < 25 ? '‚úÖ' : '‚ùå');

    if (sizeInMB >= 25) {
      console.error('‚ùå Fichier trop volumineux pour OpenAI !');
      return;
    }

    // 5. Cr√©er FormData exactement comme dans l'app
    console.log('\n5Ô∏è‚É£ Test de cr√©ation FormData...');
    const FormData = require('form-data');
    const formData = new FormData();

    // Simuler le fichier comme dans React Native
    formData.append('file', buffer, {
      filename: 'video.mp4',
      contentType: 'video/mp4'
    });

    formData.append('model', 'whisper-1');
    formData.append('language', 'fr');

    console.log('‚úÖ FormData cr√©√© avec succ√®s');

    // 6. Test de l'API OpenAI
    console.log('\n6Ô∏è‚É£ Test de l\'API OpenAI Whisper...');
    const apiResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        ...formData.getHeaders()
      },
      body: formData
    });

    console.log('   Status API:', apiResponse.status, apiResponse.statusText);
    console.log('   Headers:', Object.fromEntries(apiResponse.headers.entries()));

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error('‚ùå ERREUR API OpenAI:');
      console.error('   Status:', apiResponse.status);
      console.error('   Response:', errorText);

      // Analyser l'erreur
      try {
        const errorJson = JSON.parse(errorText);
        console.error('   Error details:', errorJson);
      } catch (e) {
        console.error('   Raw error:', errorText);
      }
    } else {
      const result = await apiResponse.json();
      console.log('‚úÖ SUCC√àS ! Transcription re√ßue:');
      console.log('   Langue d√©tect√©e:', result.language);
      console.log('   Dur√©e:', result.duration);
      console.log('   Longueur du texte:', result.text.length);
      console.log('   D√©but du texte:', result.text.substring(0, 100) + '...');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testTranscription().catch(console.error);